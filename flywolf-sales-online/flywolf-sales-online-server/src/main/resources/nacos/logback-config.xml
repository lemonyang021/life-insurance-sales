<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!-- 在yaml配置添加logging.path: 配置文件路径-->
    <springProperty scope="context" name="logging.path" source="logging.path" defaultValue="./logs" />
	 <!-- 属性文件:在properties文件中找到对应的配置项 -->
    <property name="FILE_NAME" value="sales-online" />
	<property name="maxFileSize" value="3MB"/><!-- 单个日志文件大小 -->
	<property name="maxHistory" value="30"/><!--保留最近X天的日志-->
	<property name="totalSizeCap" value="1GB"/> <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
	<property name="consolepPattern" value="%yellow(%d{yyyy-MM-dd HH:mm:ss}) %red([%thread]) %highlight(%-5level) -%cyan([%file:%line]) - %msg%n"/> <!--日志输出格式-->
	<property name="filepPattern" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level -[%file:%line] - %msg%n"/>
	<property name="charset" value="UTF-8"/>
	
	<!--控制台日志定义模板-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出（配色）：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${consolepPattern}</pattern>
            <!--user:%X{userId}   :添加用户信息，方便链路追踪     可以在aop拦截时MDC.put("userId", 1);-->
            <!--<pattern>%yellow(%d{yyyy-MM-dd HH:mm:ss}) %red([%thread]) %highlight(%-5level)  user:%X{userId} %cyan(%logger{50}) - %magenta(%msg) %n</pattern>-->
            <charset>${charset}</charset>
        </encoder>
    </appender>

    <!--根据日志级别分离日志，分别输出到不同的文件-->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志拦截器，用于设置触发条件-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置拦截的对象为INFO级别日志 -->
            <level>INFO</level>
            <!-- 当匹配到了INFO级别时，启用该段配置 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 没有匹配到INFO级别日志时，屏蔽该段配置 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${filepPattern}</pattern>
            <!--user:%X{userId}   :添加用户信息，方便链路追踪     可以在aop拦截时MDC.put("userId", 1);-->
            <!--<pattern> %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level user:%X{userId} %logger{50} - %msg%n </pattern>-->
            <charset>${charset}</charset>
        </encoder>
		
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--按时间保存日志 修改格式可以按小时、按天、月来保存-->
            <fileNamePattern>${logging.path}/${FILE_NAME}.info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--单个文件大小 注意：除了 %d 之外还有 %i。这两个占位符都是强制要求的。在当前时间还没有到达周期轮转之前，日志文件达到了 maxFileSize 指定的大小，会进行归档，递增索引从 0 开始-->
            <maxFileSize>${maxFileSize}</maxFileSize>
            <!--保存时长-->
            <MaxHistory>${MaxHistory}</MaxHistory>
            <!--总文件大小，使用此属性必须配置MaxHistory，且MaxHistory第一优先级，totalSizeCap第二优先级-->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!–按时间保存日志 修改格式可以按小时、按天、月来保存–>
            <fileNamePattern>${logging.path}/common-service.info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!–保存时长–>
            <MaxHistory>90</MaxHistory>
            <!–文件大小–>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>-->
    </appender>

    <appender name="fileWarnLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置拦截的对象为INFO级别日志 -->
            <level>WARN</level>
            <!-- 当匹配到了WARN级别时，启用该段配置 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 没有匹配到WARN级别日志时，屏蔽该段配置 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${filepPattern}</pattern>
            <charset>${charset}</charset>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--按时间保存日志 修改格式可以按小时、按天、月来保存-->
            <fileNamePattern>${logging.path}/${FILE_NAME}.warn.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--单个文件大小 注意：除了 %d 之外还有 %i。这两个占位符都是强制要求的。在当前时间还没有到达周期轮转之前，日志文件达到了 maxFileSize 指定的大小，会进行归档，递增索引从 0 开始-->
            <maxFileSize>${maxFileSize}</maxFileSize>
            <!--保存时长-->
            <MaxHistory>${MaxHistory}</MaxHistory>
            <!--总文件大小，使用此属性必须配置MaxHistory，且MaxHistory第一优先级，totalSizeCap第二优先级-->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 基于给定的临界值来过滤事件。如果事件的级别等于或高于给定的临界值,将抛弃 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>${filepPattern}</pattern>
            <charset>${charset}</charset>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>${logging.path}/${FILE_NAME}.error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--单个文件大小 注意：除了 %d 之外还有 %i。这两个占位符都是强制要求的。在当前时间还没有到达周期轮转之前，日志文件达到了 maxFileSize 指定的大小，会进行归档，递增索引从 0 开始-->
            <maxFileSize>${maxFileSize}</maxFileSize>
            <!--保存时长-->
            <MaxHistory>${MaxHistory}</MaxHistory>
            <!--总文件大小，使用此属性必须配置MaxHistory，且MaxHistory第一优先级，totalSizeCap第二优先级-->
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!--过滤器的配置在配置级别的基础上过滤，即root标签的配置级别。本例中，是对大于等于info级别的日志过滤-->
    <root level="info">
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="fileInfoLog"/>
        <appender-ref ref="fileWarnLog"/>
        <appender-ref ref="fileErrorLog"/>
    </root>
</configuration>